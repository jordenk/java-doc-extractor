Index.PACKAGES = {"cats.instances":[{"name":"cats.instances.all","shortDescription":"","object":"cats/instances/package$$all$.html","members_object":[{"label":"catsStdNonEmptyParallelForSeqZipSeq","tail":"(): Aux[Seq, ZipSeq]","member":"cats.instances.SeqInstances.catsStdNonEmptyParallelForSeqZipSeq","link":"cats/instances/package$$all$.html#catsStdNonEmptyParallelForSeqZipSeq:cats.NonEmptyParallel.Aux[Seq,cats.data.ZipSeq]","kind":"implicit def"},{"label":"catsStdShowForSeq","tail":"(arg0: Show[A]): Show[Seq[A]]","member":"cats.instances.SeqInstances.catsStdShowForSeq","link":"cats/instances/package$$all$.html#catsStdShowForSeq[A](implicitevidence$1:cats.Show[A]):cats.Show[Seq[A]]","kind":"implicit def"}],"kind":"object"}],"cats.data":[{"name":"cats.data.Binested","shortDescription":"Compose a two-slot type constructor F[_, _] with two single-slot type constructors G[_] and H[_], resulting in a two-slot type constructor with respect to the inner types.","object":"cats/data/Binested$.html","members_object":[{"label":"catsDataBitraverseForBinested","tail":"(F0: Bitraverse[F], H0: Traverse[H], G0: Traverse[G]): Bitraverse[[δ$4$, ε$5$]Binested[F, G, H, δ$4$, ε$5$]]","member":"cats.data.BinestedInstances.catsDataBitraverseForBinested","link":"cats/data/Binested$.html#catsDataBitraverseForBinested[F[_,_],G[_],H[_]](implicitF0:cats.Bitraverse[F],implicitH0:cats.Traverse[H],implicitG0:cats.Traverse[G]):cats.Bitraverse[[δ$4$,ε$5$]cats.data.Binested[F,G,H,δ$4$,ε$5$]]","kind":"implicit def"},{"label":"catsDataProfunctorForBinested","tail":"(F: Profunctor[F], G: Functor[G], H: Functor[H]): Profunctor[[δ$0$, ε$1$]Binested[F, G, H, δ$0$, ε$1$]]","member":"cats.data.BinestedInstances.catsDataProfunctorForBinested","link":"cats/data/Binested$.html#catsDataProfunctorForBinested[F[_,_],G[_],H[_]](implicitF:cats.arrow.Profunctor[F],implicitG:cats.Functor[G],implicitH:cats.Functor[H]):cats.arrow.Profunctor[[δ$0$,ε$1$]cats.data.Binested[F,G,H,δ$0$,ε$1$]]","kind":"implicit def"}],"members_case class":[{"member":"cats.data.Binested#<init>","error":"unsupported entity"},{"label":"value","tail":": F[G[A], H[B]]","member":"cats.data.Binested.value","link":"cats/data/Binested.html#value:F[G[A],H[B]]","kind":"val"},{"label":"productElementNames","tail":"(): Iterator[String]","member":"scala.Product.productElementNames","link":"cats/data/Binested.html#productElementNames:Iterator[String]","kind":"def"}],"case class":"cats/data/Binested.html","kind":"case class"}]};